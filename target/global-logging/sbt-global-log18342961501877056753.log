[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.3 (AdoptOpenJDK Java 11.0.7)
[debug]       Load.loadUnit: plugins took 475.166229ms
[debug]       Load.loadUnit: defsScala took 0.559567ms
[debug] [Loading] Scanning directory /home/hamy/.sbt/1.0/plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in /home/hamy/.sbt/1.0/plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 177.31216 ms
[debug]           Load.resolveProject(global-plugins) took 364.721686ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: /home/hamy/.sbt/1.0/plugins, plugins: List(<none>))) took 734.00319ms
[debug] [Loading] Done in /home/hamy/.sbt/1.0/plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 841.564293ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.532406ms
[debug]     Load.loadUnit(file:/home/hamy/.sbt/1.0/plugins/, ...) took 1351.871477ms
[debug]   Load.apply: load took 2903.382491ms
[debug]   Load.apply: resolveProjects took 24.709752ms
[debug]   Load.apply: finalTransforms took 385.788248ms
[debug]   Load.apply: config.delegates took 47.65596ms
[debug]   Load.apply: Def.make(settings)... took 2768.698189ms
[debug]   Load.apply: structureIndex took 575.251925ms
[debug]   Load.apply: mkStreams took 5.394556ms
[info] loading global plugins from /home/hamy/.sbt/1.0/plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 15615.493716ms
[debug]                       Load.loadUnit: plugins took 135.286134ms
[debug]                       Load.loadUnit: defsScala took 0.007199ms
[debug] [Loading] Scanning directory /home/hamy/IdeaProjects/SCP2020/project/project/project
[debug]                         Load.loadUnit: mkEval took 54.753222ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in /home/hamy/IdeaProjects/SCP2020/project/project/project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 12.187759 ms
[info] loading settings for project scp2020-build-build-build from metals.sbt ...
[debug]                           Load.resolveProject(scp2020-build-build-build) took 22.062775ms
[debug]                         Load.loadTransitive: finalizeProject(Project(id scp2020-build-build-build, base: /home/hamy/IdeaProjects/SCP2020/project/project/project, plugins: List(<none>))) took 35.167506ms
[debug] [Loading] Done in /home/hamy/IdeaProjects/SCP2020/project/project/project, returning: (scp2020-build-build-build)
[debug]                       Load.loadUnit: loadedProjectsRaw took 940.596518ms
[debug]                       Load.loadUnit: cleanEvalClasses took 10.869465ms
[debug]                     Load.loadUnit(file:/home/hamy/IdeaProjects/SCP2020/project/project/project/, ...) took 1087.970071ms
[debug]                   Load.apply: load took 1107.778254ms
[debug]                   Load.apply: resolveProjects took 0.24692ms
[debug]                   Load.apply: finalTransforms took 51.401028ms
[debug]                   Load.apply: config.delegates took 0.591836ms
[debug]                   Load.apply: Def.make(settings)... took 440.134349ms
[debug]                   Load.apply: structureIndex took 196.368482ms
[debug]                   Load.apply: mkStreams took 0.005103ms
[info] loading project definition from /home/hamy/IdeaProjects/SCP2020/project/project/project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]                 Load.loadUnit: plugins took 2569.097382ms
[debug]                 Load.loadUnit: defsScala took 0.016741ms
[debug] [Loading] Scanning directory /home/hamy/IdeaProjects/SCP2020/project/project
[debug]                   Load.loadUnit: mkEval took 7.411054ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in /home/hamy/IdeaProjects/SCP2020/project/project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(bloop.integrations.sbt.BloopPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(bloop.integrations.sbt.BloopPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,bloop.integrations.sbt.BloopPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.643004 ms
[info] loading settings for project scp2020-build-build from metals.sbt ...
[debug]                     Load.resolveProject(scp2020-build-build) took 128.505305ms
[debug]                   Load.loadTransitive: finalizeProject(Project(id scp2020-build-build, base: /home/hamy/IdeaProjects/SCP2020/project/project, plugins: List(<none>))) took 142.418096ms
[debug] [Loading] Done in /home/hamy/IdeaProjects/SCP2020/project/project, returning: (scp2020-build-build)
[debug]                 Load.loadUnit: loadedProjectsRaw took 187.994305ms
[debug]                 Load.loadUnit: cleanEvalClasses took 0.988784ms
[debug]               Load.loadUnit(file:/home/hamy/IdeaProjects/SCP2020/project/project/, ...) took 2765.504128ms
[debug]             Load.apply: load took 2769.149575ms
[debug]             Load.apply: resolveProjects took 0.159299ms
[debug]             Load.apply: finalTransforms took 126.451455ms
[debug]             Load.apply: config.delegates took 0.705547ms
[debug]             Load.apply: Def.make(settings)... took 634.197845ms
[debug]             Load.apply: structureIndex took 212.194231ms
[debug]             Load.apply: mkStreams took 0.004715ms
[info] loading project definition from /home/hamy/IdeaProjects/SCP2020/project/project
[debug] Evaluating tasks: bloopInstall
[debug] Running task... Cancel: bloop.integrations.sbt.Offloader$$anon$1@3de8f85c, check cycles: false, forcegc: true
[success] Generated .bloop/scp2020-build-build.json
[success] Total time: 1 s, completed Nov 22, 2020, 1:24:43 AM
[debug] Running task... Cancel: bloop.integrations.sbt.Offloader$$anon$1@1a01ffff, check cycles: false, forcegc: true
[debug]           Load.loadUnit: plugins took 6323.179216ms
[debug]           Load.loadUnit: defsScala took 0.011596ms
[debug] [Loading] Scanning directory /home/hamy/IdeaProjects/SCP2020/project
[debug]             Load.loadUnit: mkEval took 0.414062ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in /home/hamy/IdeaProjects/SCP2020/project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(bloop.integrations.sbt.BloopPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(bloop.integrations.sbt.BloopPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,bloop.integrations.sbt.BloopPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 13.083555 ms
[info] loading settings for project scp2020-build from metals.sbt,plugins.sbt ...
[debug]               Load.resolveProject(scp2020-build) took 150.065112ms
[debug]             Load.loadTransitive: finalizeProject(Project(id scp2020-build, base: /home/hamy/IdeaProjects/SCP2020/project, plugins: List(<none>))) took 164.660221ms
[debug] [Loading] Done in /home/hamy/IdeaProjects/SCP2020/project, returning: (scp2020-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 399.679311ms
[debug]           Load.loadUnit: cleanEvalClasses took 6.045711ms
[debug]         Load.loadUnit(file:/home/hamy/IdeaProjects/SCP2020/project/, ...) took 6730.110101ms
[debug]       Load.apply: load took 6745.414386ms
[debug]       Load.apply: resolveProjects took 0.158942ms
[debug]       Load.apply: finalTransforms took 60.45247ms
[debug]       Load.apply: config.delegates took 5.899283ms
[debug]       Load.apply: Def.make(settings)... took 415.71611ms
[debug]       Load.apply: structureIndex took 119.405265ms
[debug]       Load.apply: mkStreams took 0.003082ms
[info] loading project definition from /home/hamy/IdeaProjects/SCP2020/project
[debug] Evaluating tasks: bloopInstall
[debug] Running task... Cancel: bloop.integrations.sbt.Offloader$$anon$1@10d49900, check cycles: false, forcegc: true
[success] Generated .bloop/scp2020-build.json
[success] Total time: 8 s, completed Nov 22, 2020, 1:24:52 AM
[debug] Running task... Cancel: bloop.integrations.sbt.Offloader$$anon$1@3c17794e, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 19664.378254ms
[debug]     Load.loadUnit: defsScala took 0.015174ms
[debug] [Loading] Scanning directory /home/hamy/IdeaProjects/SCP2020
[debug]       Load.loadUnit: mkEval took 4.203052ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in /home/hamy/IdeaProjects/SCP2020, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin), Atom(com.typesafe.sbt.packager.docker.DockerPlugin), Atom(tut.TutPlugin), Atom(com.typesafe.sbt.sbtghpages.GhpagesPlugin), Atom(com.typesafe.sbt.packager.archetypes.JavaAppPackaging), Atom(microsites.MicrositesPlugin), Atom(org.scalafmt.sbt.ScalafmtPlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(bloop.integrations.sbt.BloopPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.scalafmt.sbt.ScalafmtPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(spray.revolver.RevolverPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(com.typesafe.sbt.SbtNativePackager),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(com.typesafe.sbt.packager.archetypes.JavaAppPackaging),Set(Atom(com.typesafe.sbt.packager.windows.WindowsPlugin))), Clause(Atom(com.typesafe.sbt.packager.archetypes.JavaAppPackaging),Set(Atom(com.typesafe.sbt.packager.debian.DebianPlugin))), Clause(Atom(com.typesafe.sbt.packager.archetypes.JavaAppPackaging),Set(Atom(com.typesafe.sbt.packager.rpm.RpmPlugin))), Clause(Atom(com.typesafe.sbt.packager.archetypes.scripts.AshScriptPlugin),Set(Atom(com.typesafe.sbt.packager.archetypes.scripts.BashStartScriptPlugin))), Clause(Atom(com.typesafe.sbt.packager.archetypes.systemloader.SystemVPlugin),Set(Atom(com.typesafe.sbt.packager.archetypes.systemloader.SystemloaderPlugin))), Clause(Atom(com.typesafe.sbt.packager.archetypes.systemloader.SystemdPlugin),Set(Atom(com.typesafe.sbt.packager.archetypes.systemloader.SystemloaderPlugin))), Clause(Atom(com.typesafe.sbt.packager.archetypes.systemloader.SystemloaderPlugin),Set(Atom(com.typesafe.sbt.packager.debian.DebianPlugin))), Clause(Atom(com.typesafe.sbt.packager.archetypes.systemloader.SystemloaderPlugin),Set(Atom(com.typesafe.sbt.packager.rpm.RpmPlugin))), Clause(Atom(com.typesafe.sbt.packager.archetypes.systemloader.UpstartPlugin),Set(Atom(com.typesafe.sbt.packager.archetypes.systemloader.SystemloaderPlugin))), Clause(Atom(com.typesafe.sbt.packager.debian.DebianDeployPlugin),Set(Atom(com.typesafe.sbt.packager.debian.DebianPlugin))), Clause(Atom(com.typesafe.sbt.packager.debian.DebianPlugin),Set(Atom(com.typesafe.sbt.packager.linux.LinuxPlugin))), Clause(Atom(com.typesafe.sbt.packager.debian.JDebPackaging),Set(Atom(com.typesafe.sbt.packager.debian.DebianPlugin))), Clause(Atom(com.typesafe.sbt.packager.docker.DockerPlugin),Set(Atom(com.typesafe.sbt.packager.universal.UniversalPlugin))), Clause(Atom(com.typesafe.sbt.packager.jdkpackager.JDKPackagerDeployPlugin),Set(Atom(com.typesafe.sbt.packager.jdkpackager.JDKPackagerPlugin))), Clause(Atom(com.typesafe.sbt.packager.jdkpackager.JDKPackagerPlugin),Set(Atom(com.typesafe.sbt.packager.archetypes.jar.LauncherJarPlugin))), Clause(Atom(com.typesafe.sbt.packager.linux.LinuxPlugin),Set(Atom(com.typesafe.sbt.packager.universal.UniversalPlugin))), Clause(Atom(com.typesafe.sbt.packager.rpm.RpmDeployPlugin),Set(Atom(com.typesafe.sbt.packager.rpm.RpmPlugin))), Clause(Atom(com.typesafe.sbt.packager.rpm.RpmPlugin),Set(Atom(com.typesafe.sbt.packager.linux.LinuxPlugin))), Clause(Atom(com.typesafe.sbt.packager.universal.UniversalDeployPlugin),Set(Atom(com.typesafe.sbt.packager.universal.UniversalPlugin))), Clause(Atom(com.typesafe.sbt.packager.universal.UniversalPlugin),Set(Atom(com.typesafe.sbt.SbtNativePackager))), Clause(Atom(com.typesafe.sbt.packager.windows.WindowsDeployPlugin),Set(Atom(com.typesafe.sbt.packager.windows.WindowsPlugin))), Clause(Atom(com.typesafe.sbt.packager.windows.WindowsPlugin),Set(Atom(com.typesafe.sbt.packager.universal.UniversalPlugin))), Clause(Atom(tut.TutPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(microsites.MicrositesPlugin),Set(Atom(com.typesafe.sbt.site.jekyll.JekyllPlugin))), Clause(Atom(microsites.MicrositesPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(microsites.MicrositesPlugin),Set(Atom(mdoc.MdocPlugin))), Clause(Atom(com.typesafe.sbt.sbtghpages.GhpagesPlugin),Set(Atom(com.typesafe.sbt.site.SitePlugin))), Clause(Atom(com.typesafe.sbt.sbtghpages.GhpagesPlugin),Set(Atom(com.typesafe.sbt.GitPlugin))), Clause(Atom(io.github.davidgregory084.TpolecatPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(mdoc.DocusaurusPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(mdoc.DocusaurusPlugin),Set(Atom(mdoc.MdocPlugin))), Clause(Atom(mdoc.MdocPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(com.typesafe.sbt.site.SitePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(com.typesafe.sbt.site.SitePreviewPlugin),Set(Atom(com.typesafe.sbt.site.SitePlugin))), Clause(Atom(com.typesafe.sbt.site.SiteScaladocPlugin),Set(Atom(com.typesafe.sbt.site.SitePlugin))), Clause(Atom(com.typesafe.sbt.site.asciidoctor.AsciidoctorPlugin),Set(Atom(com.typesafe.sbt.site.SitePlugin))), Clause(Atom(com.typesafe.sbt.site.gitbook.GitBookPlugin),Set(Atom(com.typesafe.sbt.site.SitePlugin))), Clause(Atom(com.typesafe.sbt.site.hugo.HugoPlugin),Set(Atom(com.typesafe.sbt.site.SitePlugin))), Clause(Atom(com.typesafe.sbt.site.jekyll.JekyllPlugin),Set(Atom(com.typesafe.sbt.site.SitePlugin))), Clause(Atom(com.typesafe.sbt.site.laika.LaikaSitePlugin),Set(Atom(com.typesafe.sbt.site.SitePlugin))), Clause(Atom(com.typesafe.sbt.site.laika.LaikaSitePlugin),Set(Atom(laika.sbt.LaikaPlugin))), Clause(Atom(com.typesafe.sbt.site.nanoc.NanocPlugin),Set(Atom(com.typesafe.sbt.site.SitePlugin))), Clause(Atom(com.typesafe.sbt.site.pamflet.PamfletPlugin),Set(Atom(com.typesafe.sbt.site.SitePlugin))), Clause(Atom(com.typesafe.sbt.site.paradox.ParadoxSitePlugin),Set(Atom(com.lightbend.paradox.sbt.ParadoxPlugin))), Clause(Atom(com.typesafe.sbt.site.paradox.ParadoxSitePlugin),Set(Atom(com.typesafe.sbt.site.SitePlugin))), Clause(Atom(com.typesafe.sbt.site.paradox.ParadoxSitePlugin),Set(Atom(com.typesafe.sbt.web.SbtWeb))), Clause(Atom(com.typesafe.sbt.site.preprocess.PreprocessPlugin),Set(Atom(com.typesafe.sbt.site.SitePlugin))), Clause(Atom(com.typesafe.sbt.site.sphinx.SphinxPlugin),Set(Atom(com.typesafe.sbt.site.SitePlugin))), Clause(Atom(com.typesafe.sbt.GitBranchPrompt),Set(Atom(com.typesafe.sbt.GitPlugin))), Clause(Atom(com.typesafe.sbt.GitVersioning),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(com.typesafe.sbt.GitVersioning),Set(Atom(com.typesafe.sbt.GitPlugin))), Clause(Atom(org.lyranthe.sbt.PartialUnification),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(com.lightbend.paradox.sbt.ParadoxPlugin),Set(Atom(com.typesafe.sbt.web.SbtWeb))), Clause(Atom(laika.sbt.LaikaPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(com.typesafe.sbt.web.SbtWeb),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(bloop.integrations.sbt.BloopPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(spray.revolver.RevolverPlugin))), Clause(Atom(com.typesafe.sbt.packager.archetypes.JavaAppPackaging),Set(Atom(com.typesafe.sbt.packager.archetypes.scripts.BashStartScriptPlugin))), Clause(Atom(com.typesafe.sbt.packager.archetypes.JavaAppPackaging),Set(Atom(com.typesafe.sbt.packager.archetypes.scripts.BatStartScriptPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(io.github.davidgregory084.TpolecatPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(com.typesafe.sbt.site.SitePlugin))), Clause(Atom(com.typesafe.sbt.site.SitePlugin),Set(Atom(com.typesafe.sbt.site.SitePreviewPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(com.typesafe.sbt.GitPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.lyranthe.sbt.PartialUnification)))))
[debug]   :: deduced result: Matched(org.scalafmt.sbt.ScalafmtPlugin,microsites.MicrositesPlugin,com.typesafe.sbt.packager.archetypes.JavaAppPackaging,com.typesafe.sbt.sbtghpages.GhpagesPlugin,tut.TutPlugin,com.typesafe.sbt.packager.docker.DockerPlugin,sbt.plugins.CorePlugin,com.typesafe.sbt.site.SitePlugin,com.typesafe.sbt.site.jekyll.JekyllPlugin,com.typesafe.sbt.packager.rpm.RpmPlugin,sbt.plugins.JvmPlugin,com.typesafe.sbt.packager.archetypes.scripts.BashStartScriptPlugin,com.typesafe.sbt.GitPlugin,com.typesafe.sbt.packager.windows.WindowsPlugin,com.typesafe.sbt.packager.archetypes.scripts.BatStartScriptPlugin,com.typesafe.sbt.packager.universal.UniversalPlugin,mdoc.MdocPlugin,sbt.plugins.IvyPlugin,sbt.plugins.Giter8TemplatePlugin,com.typesafe.sbt.packager.debian.DebianPlugin,io.github.davidgregory084.TpolecatPlugin,bloop.integrations.sbt.BloopPlugin,com.typesafe.sbt.site.SitePreviewPlugin,com.typesafe.sbt.SbtNativePackager,sbt.plugins.SemanticdbPlugin,sbt.plugins.JUnitXmlReportPlugin,com.typesafe.sbt.packager.linux.LinuxPlugin,org.lyranthe.sbt.PartialUnification,spray.revolver.RevolverPlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 90.590955 ms
[info] loading settings for project scp2020 from build.sbt ...
[debug]         Load.resolveProject(scp2020) took 1956.525045ms
[debug]       Load.loadTransitive: finalizeProject(Project(id scp2020, base: /home/hamy/IdeaProjects/SCP2020, plugins: List(<none>))) took 2063.911347ms
[debug] [Loading] Done in /home/hamy/IdeaProjects/SCP2020, returning: (scp2020)
[debug]     Load.loadUnit: loadedProjectsRaw took 2934.803296ms
[debug]     Load.loadUnit: cleanEvalClasses took 2.052752ms
[debug]   Load.loadUnit(file:/home/hamy/IdeaProjects/SCP2020/, ...) took 22636.679026ms
[debug] Load.apply: load took 22648.670628ms
[debug] Load.apply: resolveProjects took 3.079408ms
[debug] Load.apply: finalTransforms took 360.925903ms
[debug] Load.apply: config.delegates took 4.828432ms
[debug] Load.apply: Def.make(settings)... took 3095.062404ms
[debug] Load.apply: structureIndex took 159.78131ms
[debug] Load.apply: mkStreams took 0.004843ms
[info] set current project to SCP2020 (in build file:/home/hamy/IdeaProjects/SCP2020/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(shell, None, None)
[warn] sbt server could not start because there's another instance of sbt running on this build.
[warn] Running multiple instances is unsupported
[debug] Forcing garbage collection...
